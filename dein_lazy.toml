[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = 'csv'

[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
    nnoremap <silent> <leader>n :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

[[plugins]]
repo = 'hpjansson/chafa'

[[plugins]]
repo = 'atanunq/viu'
build = 'cargo install --path .'

[[plugins]]
repo = 'jstkdng/ueberzugpp'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
frozen = '1'
merged = '0'

[[plugins]]
repo = 'ibhagwan/fzf-lua'
depends = ['fzf', 'nvim-web-devicons', 'chafa', 'viu', 'ueberzugpp']
on_map = {n = [
                   '<leader>f',
                   '<leader>g',
                   '<leader>G',
                   '<leader>b',
                   '<leader>h',
                   '<leader>r',
]}
hook_source = '''
nnoremap <silent> <leader>f <cmd>lua require('fzf-lua').files()<CR>
nnoremap <silent> <leader>g <cmd>lua require('fzf-lua').git_files()<CR>
nnoremap <silent> <leader>G <cmd>lua require('fzf-lua').git_status()<CR>
nnoremap <silent> <leader>b <cmd>lua require('fzf-lua').buffers()<CR>
nnoremap <silent> <leader>h <cmd>lua require('fzf-lua').oldfiles()<CR>
nnoremap <silent> <leader>r <cmd>lua require('fzf-lua').live_grep()<CR>

lua << EOF
require('fzf-lua').setup({
    winopts = {
        height = 0.8,
        width = 0.8,
        row = 0.35,
        col = 0.5,
        border = 'rounded'
    },
    fzf_opts = {
        ['--layout'] = 'reverse'
    },
    files = {
        fd_opts = '--color=never --type f --hidden --follow --exclude .git'
    },
    previewers = {
        builtin = {
            extensions = {
                ["png"] = { "viu", "-b" },
                ["svg"] = { "chafa", "{file}"},
                ["jpg"] = { "ueberzug" },
            },
            ueberzug_scaler = "cover",
        },
    },
})
EOF
'''

[[plugins]]
repo = 'preservim/vim-indent-guides'
on_ft = ['markdown', 'python', 'fortran', 'c++', 'tex', 'toml', 'lua']
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
'''
hook_source = '''
    let g:indent_guides_auto_colors = 0
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#d7d7d7 ctermbg=254
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#e4e4e4 ctermbg=8
'''

[[plugins]]
repo = 'tpope/vim-surround'
on_map = ['ysw', 'cs', 'ds', 'S']
# TODO: モードに対応する

# [[plugins]]
# repo = 'tpope/vim-fugitive'
# on_cmd = 'Git'

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'sh -c "cd app && npx --yes npm install"'
hook_add = '''
    nnoremap <silent> <leader>md <Plug>MarkdownPreview
'''


#_____________________________________________________________ Start Copilot
[[plugins]]
repo = 'github/copilot.vim'
on_cmd = 'Copilot'
on_ft = ['python']
hook_source = '''
    let g:copilot_node_command = expand( '~/.nodejs/bin/node' )
    let g:copilot_no_maps = v:true
    let g:copilot_hide_during_completion = 0
    imap <silent><expr> <C-g> copilot#Accept()
    imap <silent><expr> <C-n> copilot#Next()
    imap <silent><expr> <C-p> copilot#Previous()

    let g:copilot_filetypes = #{
        \   gitcommit: v:true,
        \   markdown: v:true,
        \   python: v:true,
        \   vim: v:true,
        \}
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'CopilotC-Nvim/CopilotChat.nvim'
on_map = '<leader>cop'
depends = ['copilot.vim', 'plenary.nvim']
branch = 'main'
hook_add = '''
    nnoremap <leader>cop :CopilotChatOpen<CR>
'''
hook_post_source = '''
nnoremap <leader>cop :CopilotChatOpen<CR>
lua << EOF
require("CopilotChat").setup {
    debug = false,
    model = 'claude-3.5-sonnet',
    system_prompt = 'Your name is Copilot. You are an AI buddy of the user. You must assist the user not only for coding but also for writing, translating, summerizing the scentence, and proofreading. If you find something missing or wrong in order to assist the user, you must ask the user for more information or clarification. You also must ask the user to provide more information if the user provides an incomplete or unclear request. ',
    prompts = {
        Explain = {
            prompt = "/COPILOT_EXPLAIN 上記のコードを日本語で説明してください",
            mapping = '<leader>cce',
            description = "バディにコードの説明をお願いする。",
        },
        Fix = {
            prompt = "/COPILOT_FIX このコードには問題があります。バグを修正したコードを表示してください。コメントは英語で、説明は日本語でしてください。",
            mapping = '<leader>ccf',
            description = "バディにコードの修正をお願いする。",
        },
        Optimize = {
            prompt = "/COPILOT_REFACTOR モダンでシンプルにすることを目標とし、選択したコードを最適化し、最適化を反映したコードを表示してください。コメントは英語で、説明は日本語でしてください。",
            mapping = '<leader>cco',
            description = "バディにコードの最適化をお願いする。",
        },
        FixDiagnostic = {
            prompt = "コードを診断結果に従って修正し、修正後のコードを表示してください。コメントは英語で、説明は日本語でしてください。",
            mapping = '<leader>ccd',
            description = "バディに静的解析結果に基づいたコードの最適化をお願いする。",
            selection= require('CopilotChat.select').diagnostics,
        },
        Commit = {
            prompt = "変更に対応するコミットメッセージを英語で記述して下さい。タイトルは最大50文字、メッセージは72文字で折り返し、メッセージ全体をgitcommit 言語のコードブロックでラップして下さい。メッセージ作成にあたり、commitizeがあればその規則に従って下さい。",
            mapping = '<leader>ccc',
            description = "バディにコードのコミットをお願いする。",
            selection= require('CopilotChat.select').gitdiff,
        },
        Jap2Eng = {
            prompt = "/USER_JAP2ENG 上記の文章を日本語から英語に翻訳して下さい。もし主語、動詞、目的語などが不明瞭で明確な翻訳ができない場合は、私に追加の質問をし不明瞭な点を解消してから翻訳に取り掛かってください。",
            mapping = '<leader>ccje',
            description = "バディに文章を日本語から英語への翻訳をお願いする。",
            window = {
                layout = 'float',
                width = 0.8,
                height = 0.8,
            },
        },
        Eng2Jap = {
            prompt = "/USER_ENG2JAP 上記の文章を英語から日本語に翻訳して下さい。",
            mapping = '<leader>ccej',
            description = "バディに文章を英語から日本語への翻訳をお願いする。",
            window = {
                layout = 'float',
                width = 0.8,
                height = 0.8,
            },
        },
        EngProofRead = {
            prompt = "/USER_ENGPROOFREAD 上記の文章を文法の誤りを直し、ネイティブから見て自然な英語になるように校閲、推敲して下さい。このとき、並び替えたり別の表現を用いれば不要になる箇所は取り去り、必要十分な文章のみで英文を構成してください。",
            mapping = '<leader>ccep',
            description = "バディに英文校閲をお願いする。",
            window = {
                layout = 'float',
                width = 0.8,
                height = 0.8,
            },
        },
    },
    vim.keymap.set({'n'},
                   '<leader>ccq',
                   function()
                       local input = vim.fn.input("Quick Chat: ")
                       if input ~= "" then
                           require("CopilotChat").ask(input, { selection = require("CopilotChat.select").buffer })
                       end
                   end,
                   { desc = 'Quick Chat'})
}
EOF
'''
#_____________________________________________________________ End Copilot

[[plugins]]
repo = 'vim-denops/denops.vim'
hook_source = '''
    let g:denops#server#deno_args = [
        \    '-q',
        \    '-A',
        \    '--unstable-kv',
        \]
'''

[[plugins]]
repo = 'skk-dev/dict'

[[plugins]]
repo = 'vim-skk/skkeleton'
depends = ['denops.vim', 'dict']
denops_wait = false
on_map = { ictn = '<Plug>(skkeleton-'}
hook_add = '''
    inoremap <C-j>  <Plug>(skkeleton-toggle)
    cnoremap <C-j>  <Plug>(skkeleton-toggle)
    tnoremap <C-j>  <Plug>(skkeleton-toggle)
    nnoremap <C-j> i<Plug>(skkeleton-enable)
'''
hook_source = '''
    call skkeleton#config(#{
        \   globalDictionaries    : ['~/.cache/dein/repos/github.com/skk-dev/dict/SKK-JISYO.L'->expand()],
        \   databasePath          : '~/.cache/skk/skkeleton.db'->expand(),
        \   completionRankFile    : '~/.skk/rank.json'->expand(),
        \   sources               : ['deno_kv', 'google_japanese_input'],
        \   registerConvertResult : v:true,
        \   eggLikeNewline        : v:true,
        \ })

    ""autocmd MyAutoCmd User skkeleton-enable-pre call s:skkeleton_pre()
    ""function! s:skkeleton_pre() abort
    ""    " Overwrite sources
    ""    let s:prev_buffer_config = ddc#custom#get_buffer()
    ""    call ddc#custom#patch_buffer({
    ""    \    'sources'      : ['around', 'skkeleton'],
    ""    \    'sourceOptions':{
    ""    \        '_' : {
    ""    \            'keywordPattern': '[ァ-ヮア-ンー]+',
    ""    \              },
    ""    \                    },
    ""    \})
    ""endfunction

    ""autocmd MyAutoCmd User skkeleton-disable-pre call s:skkeleton_post()
    ""function! s:skkeleton_post() abort
    ""    if 's:prev_buffer_config'->exists()
    ""        " Restore sources
    ""        call ddc#custom#set_buffer(s:prev_buffer_config)
    ""    endif
    ""endfunction

    call skkeleton#initialize()
'''

[[plugins]]
repo = 'delphinus/skkeleton_indicator.nvim'
on_source = 'skkeleton'
lua_source = '''
    require('skkeleton_indicator').setup{}
'''

#_____________________________________________________________ Start ddc
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
    call ddc#custom#patch_global('ui', 'pum')
    call ddc#custom#patch_global('sources', [
    \                                        'vim-lsp',
    \                                        'ultisnips',
    \                                        'file',
    \                                        'around',
    \                                        'buffer',
    \                                        'rg',
    \                                        'dictionary',
    \                                        ])
    call ddc#custom#patch_global('sourceOptions', {
    \   '_'        : {
    \       'matchers'              : ['matcher_head'],
    \       'sorters'               : ['sorter_rank'],
    \       'converters'            : ['converter_remove_overlap'],
    \                },
    \  'vim-lsp'   : {
    \       'mark'                  : '[LSP]',
    \       'matchers'              : ['matcher_head'],
    \       'forceCompletionPattern': '\.|:|->|"\w+/*'
    \                },
    \  'ultisnips' : {
    \       'mark'                  : '[UltSnps]'
    \                },
    \  'around'    : {
    \       'mark'                  : '[Around]'
    \                },
    \  'buffer'    : {
    \       'mark'                  : '[Buf]'
    \                },
    \  'rg'    : {
    \       'mark'                  : '[ripgrep]'
    \                },
    \  'dictionary': {
    \       'mark'                  : '[Dict]'
    \                },
    \  'file'      : {
    \       'mark'                  : '[File]',
    \       'isVolatile'            : v:true,
    \       'forceCompletionPattern': '\S/\S*'
    \                },
    \  'nvim-obsidian': {
    \       'mark'                  : '[OBS]',
    \                },
    \  'nvim-obsidian-new': {
    \       'mark'                  : '[OBS+]',
    \                },
    \ })
    call ddc#custom#patch_global('sourceParams', {
    \  'dictionary': {
    \       'dictPaths'             : ['/usr/share/dict/american-english'],
    \       'smartCase'             : v:true,
    \       'showMenu'              : v:false,
    \                },
    \  'nvim-obsidian': #{
    \       dir: expand("$OBSIDIAN_PATH"),
    \   },
    \  'nvim-obsidian-new': #{
    \       dir: expand("$OBSIDIAN_PATH"),
    \   },
    \ })

    function! Obsidian() abort
        call ddc#custom#patch_buffer('sources', [
        /    'nvim-obsidian',
        /    'nvim-obsidian-new',
        /])
    endfunction
    autocmd BufRead,BufNewFile expand("$OBSIDIAN_PATH") .. "/**/*.md" call Obsidian()

    call ddc#enable()

    inoremap <silent><expr> <TAB>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \'<TAB>' : ddc#map#manual_complete()
    inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
    inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
    inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
    inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

'''

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'ttak0422/ddc-source-nvim-obsidian'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'
hook_add = '''
    call pum#set_option({
    \            'max_width': 50,
    \           'max_height': 10,
    \        'preview_width': 50,
    \       'preview_height': 10,
    \ })
'''
[[plugins]]
repo = 'Shougo/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-source-vim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-dictionary'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-ultisnips'
on_source = 'ddc.vim'

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'
depends = ['vim-vsnip', 'vim-vsnip-integ']

#_____________________________________________________________ End ddc

#_____________________________________________________________ Start treesitter
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = '0'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
lua_source = '''
require( 'nvim-treesitter.configs' ).setup {
    highlight = {enable = true},
    indent    = {enable = true},
    fold = {
        enable = true,
        indent_level = 2,
        scan = 100,
    },
}

vim.treesitter.language.register('latex', 'tex')

function MyFoldtext()
    -- foldstart行の取得
    local line = vim.fn.getline(vim.v.foldstart)
    --local line = vim.treesitter.foldtext()

    -- fold の行数を計算
    local n_lines = vim.v.foldend - vim.v.foldstart + 1
    -- インデントの取得
    local indent = string.match(line, "^%s*")
    -- 行のトリム
    line = string.gsub(line, "^%s*(.-)%s*$", "%1")

    -- 最終的な文字列を作成
    local result = string.format("%s%s │ %d%s", indent, line, n_lines, (n_lines == 1 and " line" or " lines"))

    return result
end

vim.api.nvim_create_autocmd('Filetype',{
    callback = function(args)
        if require('nvim-treesitter.parsers').has_parser(args.match) then
            vim.api.nvim_set_option_value(
                'foldmethod',
                'expr',
                { scope = 'local' }
            )
            vim.api.nvim_set_option_value(
                'foldexpr',
                'v:lua.vim.treesitter.foldexpr()',
                { scope = 'local' }
            )
            vim.api.nvim_set_option_value(
                'foldtext',
                'v:lua.MyFoldtext()',
                --'v:lua.vim.treesitter.foldtext()',
                { scope = 'local' }
            )
            -- LaTeXファイルの場合のみfoldlevelを1に設定
            if args.match == 'tex' or args.match == 'latex' then
                vim.api.nvim_set_option_value(
                    'foldlevel',
                    1,
                    { scope = 'local' }
                )
            end
        end
    end,
})

vim.opt.foldenable = true
'''

[[plugins]]
repo = 'nvim-treesitter/playground'
depends = 'nvim-treesitter'
on_cmd = ['TSPlaygroundToggle']
#_____________________________________________________________ End treesitter

#_____________________________________________________________ Start LSP
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
depends = ['vim-lsp']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['asyncomplete.vim', 'vim-lsp']

[[plugins]]
repo = 'mattn/vim-lsp-icons'
on_source = 'vim-lsp'

[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'
deponds = 'vim-lsp'
on_source = 'vim-lsp'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
merged = '0'
on_event = [ 'BufRead', 'BufNewFile', 'BufWinEnter' ]
depends = ['async.vim']

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = 'vim-lsp'
hook_add = '''
    function! s:on_lsp_buffer_enabled() abort
        setlocal omnifunc=lsp#complete
        setlocal signcolumn=yes
        nmap <buffer> gd <plug>(lsp-definition)
        nmap <buffer> <F2> <plug>(lsp-rename)
        inoremap <expr> <cr>pumvisible()? "\<c-y>\<cr>":"\<cr>"
    endfunction

    augroup lsp_install
        au!
        autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END
    command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')

    let g:lsp_diagnostics_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1
    let g:asyncomplete_auto_popup = 0
    let g:asyncomplete_auto_completeopt = 0
    let g:asyncomplete_popup_delay = 200
    let g:lsp_text_edit_enabled = 1
    let g:lsp_settings_enable_suggestions = 1

    " For efm-langserver
    let g:lsp_settings = {
    \   'efm-langserver': {
    \       'disabled': v:false,
    \       'allowlist': [
    \           'markdown',
    \           'tex',
    \           'latex'
    \       ],
    \   },
    \   'pylsp': {
    \       'disabled': v:false,
    \       'workspace_config': {
    \           'pylsp': {
    \               'configurationSources': ['pycodestyle'],
    \               'plugins': {
    \                   'pycodestyle': {
    \                       'enabled': v:true,
    \                       'ignore': ['E201', 'E202', 'E203', 'E221', 'E266', 'E302'],
    \                       'maxLineLength': 100
    \                   },
    \                   'flake8': {
    \                       'enabled': v:false
    \                   }
    \               }
    \           }
    \       }
    \   },
    \   'texlab': {
    \       'disabled': v:false,
    \       'allowlist': [
    \           'tex',
    \           'latex'
    \        ]
    \   }
    \}
    let g:lsp_signs_warning = {'text': '⚠'}

    let g:lsp_log_file = ''
    if !has('nvim')
        let g:lsp_diagnostics_float_cursor = 1
    endif
'''
#_____________________________________________________________ End LSP

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
    xnoremap <silent>ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_cmd = '<Plug>(easymotion-)'
hook_add = '''
    let g:EasyMotion_do_mapping = 0 "Disable default mappings
    let g:EasyMotion_smartcase = 1 "Turn on case insensitive feature
'''

#_____________________________________________________________ Start vim-quickrun
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_source = 'vim-quickrun'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = '<F5>'
hook_add = '''
    nnoremap <silent> <F5> :QuickRun<CR>
'''
hook_source = '''
    " Kill the process by <Ctrl-C>
    function! s:sweep_and_message()
        call quickrun#sweep_sessions()
        echo "Killed"
        return ""
    endfunction
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? <SID>sweep_and_message(): "\<C-c>"

    " Show an in progress animation
    let s:hook = {
    \   "name"         : "in_progress",
    \   "kind"         : "hook",
    \   "index_counter": 0,
    \   "config"       : {
    \       "enable": 0
    \}
    \}

    function! s:hook.on_read(session, context)
        let self.index_counter = -2
    endfunction

    function! s:hook.on_output(session, context)
        let self.index_counter += 1
        if self.index_counter < 0
            return
        endif
        let anime_list = [
       \   '⠋',
       \   '⠙',
       \   '⠹',
       \   '⠸',
       \   '⠼',
       \   '⠴',
       \   '⠦',
       \   '⠧',
       \   '⠇',
       \   '⠏',
       \]
        echo anime_list[ self.index_counter % len(anime_list)]
    endfunction

    call quickrun#module#register(s:hook, 1)
    unlet s:hook

    " General setting
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config._ = {
    \    'runner'                         : 'vimproc',
    \    'runner/vimproc/updatetime'      : 60,
    \    'outputter'                      : 'error',
    \    'outputter/error/success'        : 'buffer',
    \    'outputter/error/error'          : 'quickfix',
    \    'outputter/buffer/split'         : 'rightbelow 8sp',
    \    'outputter/buffer/close_on_empty': 1,
    \    'hook/in_progress/enable'        : 1,
    \}

    " For LaTeX
    let g:quickrun_config['tex'] = {
    \    'command'                : 'latexmk',
    \    'outputter'              : 'error',
    \    'outputter/error/success': 'quickfix',
    \    'outputter/error/error'  : 'buffer',
    \    'srcfile'                : expand("%"),
    \    'cmdopt'                 : '',
    \    'hook/sweep/files'       : [
    \        '%S:p:r.aux',
    \        '%S:p:r.bbl',
    \        '%S:p:r.blg',
    \        '%S:p:r.dvi',
    \        '%S:p:r.fdb_latexmk',
    \        '%S:p:r.fls',
    \        '%S:p:r.log',
    \        '%S:p:r.out',
    \    ],
    \    'exec'                   : '%c %o %a %s',
    \}
'''
#_____________________________________________________________ End vim-quickrun

[plugins.ftplugin]
tex_plaintex_latex = '''
    set shiftwidth=2

    autocmd MyAutoCmd FileType tex call <SID>TeXKeymap()
    autocmd MyAutoCmd FileType tex
        \ autocmd BufWritePre <buffer> call <SID>FixPunctuation()

    function! s:TeXKeymap() abort
        inoremap $ $$<LEFT>
        inoremap ` `'<LEFT>
        inoremap \mr<SPACE> \mathrm{}<LEFT>
    endfunction

    function! s:FixPunctuation() abort
        let l:pos = getpos('.')
        " その他の句点を全角ピリオドに変換
        silent! execute ':%s/[。]/．/g'
        silent! execute ':%s/、/，/g'
        silent! execute ':%s/\\\@<!\s\+$//'
        setlocal modified
        call setpos('.', l:pos)
    endfunction
'''

markdown = '''
    autocmd MyAutoCmd FileType markdown call s:MDKeymap()
    autocmd MyAutoCmd FileType markdown
        \ autocmd BufWritePre <buffer> call s:FixPunctuation()
    function! s:MDKeymap() abort
        inoremap $ $$<LEFT>
        inoremap \mr<SPACE> \mathrm{}<LEFT>
    endfunction
    function! s:FixPunctuation() abort
        let l:pos = getpos('.')
        silent! execute ':%s/。/./g'
        silent! execute ':%s/、/,/g'
        silent! execute ':%s/\\\@<!\s\+$//'
        setlocal modified
        call setpos('.', l:pos)
    endfunction
'''

toml = '''
    setl foldmethod=expr
    setl foldexpr=<SID>fold_expr(v:lnum)

    function! s:fold_expr(lnum) abort
        let line = getline(a:lnum)
        return line ==# '' || line[0:3] ==# '    '
    endfunction
'''

#_____________________________________________________________ Start snippets
[[plugins]]
repo = 'SirVer/ultisnips'
on_event = 'InsertEnter'
hook_add = '''
    let g:UltiSnipsExpandTrigger="<c-l>"
    let g:UltiSnipsJumpForwardTrigger="<c-n>"
    let g:UltiSnipsJumpBackwardTrigger="<c-b>"
    let g:UltiSnipsSnippetDirectories=['~/.config/nvim/mySnippets'->expand(), '~/.cache/dein/repos/github.com/honza/vim-snippets/UltiSnips'->expand()]
'''

[[plugins]]
repo = 'honza/vim-snippets'
on_source = 'ultisnips'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
#_____________________________________________________________ End snippets

#_____________________________________________________________ Start Obsidian
[[plugins]]
repo = 'epwalsh/obsidian.nvim'
on_ft = ['markdown']
depends = ['plenary.nvim', 'fzf-lua']
# on_event = ["BufReadPre" .. expand("$OBSIDIAN_PATH") .. "/**.md"]
lua_source = '''
vim.opt_local.conceallevel = 2
require("obsidian").setup{
    notes_subdir = "Output",
    log_level = vim.log.levels.DEBUG,
    disable_frontmatter = true,

    workspaces = {
        {
            name = "Obsidian_Vault",
            path = vim.fn.expand("$OBSIDIAN_PATH")
        },
    },
    daily_notes = {
        folder      = "Output",
        date_format = "%Y-%m-%d",
    },
    picker = {
        name = 'fzf-lua',
        new = "<C-x>",
        insert_link = "<C-l>"
    },
    completion = {
        nvim_cmp = false,
        min_chars = 2,
    },
}
'''
#_____________________________________________________________ End Obsidian

#_____________________________________________________________ Start noice
[[plugins]]
repo = 'folke/noice.nvim'
on_event = 'CmdlineEnter'
depends = ['nui.nvim', 'nvim-notify', 'nvim-treesitter', 'fzf-lua']
lua_source = '''
require("noice").setup({
  lsp = {
    -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
    override = {
      ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
      ["vim.lsp.util.stylize_markdown"] = true,
      ["cmp.entry.get_documentation"] = true, -- requires hrsh7th/nvim-cmp
    },
  },
  -- you can enable a preset for easier configuration
  presets = {
    bottom_search = true, -- use a classic bottom cmdline for search
    command_palette = true, -- position the cmdline and popupmenu together
    long_message_to_split = true, -- long messages will be sent to a split
    inc_rename = false, -- enables an input dialog for inc-rename.nvim
    lsp_doc_border = false, -- add a border to hover docs and signature help
  },
  cmdline = {
      enabled = true, -- enables the Noice cmdline UI
      view = "cmdline_popup", -- view for rendering the cmdline. Change to `cmdline` to get a classic cmdline at the bottom
      opts = {}, -- global options for the cmdline. See section on views
      ---@type table<string, CmdlineFormat>
      format = {
        -- conceal: (default=true) This will hide the text in the cmdline that matches the pattern.
        -- view: (default is cmdline view)
        -- opts: any options passed to the view
        -- icon_hl_group: optional hl_group for the icon
        -- title: set to anything or empty string to hide
        cmdline = { pattern = "^:", icon = "", lang = "vim" },
        search_down = { kind = "search", pattern = "^/", icon = " ", lang = "regex" },
        search_up = { kind = "search", pattern = "^%?", icon = " ", lang = "regex" },
        filter = { pattern = "^:%s*!", icon = "$", lang = "bash" },
        lua = { pattern = { "^:%s*lua%s+", "^:%s*lua%s*=%s*", "^:%s*=%s*" }, icon = "", lang = "lua" },
        help = { pattern = "^:%s*he?l?p?%s+", icon = "󰋗" },
        input = { view = "cmdline_input", icon = "󰥻 " }, -- Used by input()
        -- lua = false, -- to disable a format, set to `false`
      },
    },
    notify = {
        enabled = true,
        view = "notify",
        on_open = function(win)
            vim.api.nvim_win_set_config(win, { focusable = false})
        end,
    },
})
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'rcarriga/nvim-notify'
# lua_source = '''
# require("nvim-notify").setup({
#     on_open = function(win)
#         vim.api.nvim_win_set_config(win, { focusable = false})
#     end,
# })
# '''

#_____________________________________________________________ End noice
[[plugins]]
repo = 'mattn/vim-sonictemplate'
on_cmd = [ 'Template' ]
hook_source = '''
    let g:sonictemplate_vim_template_dir = expand( '~/.config/nvim/templates' ) '''

